1.案例1-展示所有商品
	需要：
		1 数据库 表 
		2.需要的jar包
			驱动 dbutils c3p0 jstl beanuils
		3. servlet调用service, 返回的是一个list
2. 案例2-添加商品
	需求：在index页面添加超链接。跳转到一个页面填写商品信息，点击保存按钮，将商品保存到数据库。
	
		表单，
		封装数据(beanuils.populate(Product p,request.getparameterMap()))
		调用service...，跳转到findAllServlet（请求转发和重定向）
		
	有表单使用的时候，若使用请求转发会发出重复提交
		方案1-重定向
		方案2-使用令牌机制：保证商品只添加一次
		
		
///	//////////////
	什么时候用重定向 什么时候用请求转发：
	1.如果是域 request，用请求转发
	2.一般用重定向 转发都可以
	3.如果访问的是站外资源 用重定向
	
///////////////////
3. 案例3-修改商品信息
	需求：
		在product_list。jsp 后都有修改操作，点击修改，跳转到一个修改页面 edit.jsp, 将原来的数据展示出来。修改-保存。
		
		步骤：先查询，后修改
			查询操作：点击修改连接的时候，
				<a href="/../getProductById?pid=aaa"></a>
				通过pid获取到商品
				将product 放到request域中，请求转发到edit.jsp
4.案例4-删除商品
	列表页面，点击一个商品的删除操作，弹出确定删除商品吗？
	确定再删除商品
	 
	location.href="..." 

	/////////////////////////
	扩展-删除多个商品：
		在每个商品前面添加复选框，勾选需要删除的商品，（添加一个按钮 删除选中）
		
		步骤分析：
			给每一个商品添加复选框，（全选和全不选），同时添加name属性，值为pid,value 就是pid, 点击删除选中，需要将勾选的商品的id提交到后台
			
			request.getparameterValues("pid") 
			必须把所有的商品方法放入一个表单中，
			需要在按钮添加事件，
				先获取表单
				调用表单的submit()
				
			delCheckedServlet
				1 获取所要删除的商品id   string [] ids
				2 调用sevice完成操作
				3 页面重定向   findAllServlet

5. 案例5-多条件查询
		product_list 添加 一个表单，输入商品名称和关键词，点击确定，将符合条件的商品展示在当前页面、
		
		dao 里有一个where 1=1 ，然后再sql拼接
		
6. 	案例6-分页展示商品
	
	分类：
		物理分页：（开发中）
			一次只去数据库中  只查询当前页需要的数据
		逻辑分页：
			一次性将所有数据查询出来，放入内存（就是放入 集合），每次查询只需要去内存截取，获取自己想要的数据用sublist截取，
	mysql中的分页：
		limit
			格式1：select ... limit m,n
				从索引为m条开始向后查找n条数据
				就是从 第m+1 条到第 m+n 条
			格式2： select ... limit n;
					等价于 select ... limit 0，n;
			
		每页显示3条数据：
			第一页：limit 0,3
			第二页：limit 1,3
			第三页：limit 2,3
			第n页：limit (n-1)*3,3
		
/////////////////////////////////////
	每一页上需要的数据有：
		当前页的内容：limit 查询
		当前页码 从前台传过去
		每一页显示的条数：
		总页数   math.ceil(double) 想上取整
		总条数
		
		开发中一般会将这5个参数封装成一个javabean（Pagebean）
			private List<T> list;  当前页内容      查询
			private int currentPage;  当前页码     传递
			private int pageSize；  每页显示的条数  固定
			private int totalCount； 总条数         查询
			private int totalPage；总页数           计算
		
	
	///////////////////////
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		